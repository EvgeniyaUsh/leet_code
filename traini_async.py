import asyncio
from asyncio import sleep


async def make_request():
    await sleep(0.1)
    return 1


# async def main():
#     chunk = 100
#     count = 0
#     tasks = []

#     for i in range(10_000):
#         count += 1
#         tasks.append(asyncio.create_task(make_request()))
#         if len(tasks) == chunk or count == 10_000:
#             res = await asyncio.gather(*tasks)
#             print(res)
#             tasks = []
#             print(count)


# asyncio.run(main())

# import os
# from time import sleep


# import asyncio
# import random


# async def worker(semaphore):
#     async with semaphore:  # üîπ –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω
#         print(f"–ó–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞")
#         await asyncio.sleep(random.uniform(1, 3))  # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã
#         print(f"–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


# async def main():
#     semaphore = asyncio.Semaphore(4)  # –†–∞–∑—Ä–µ—à–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 –∑–∞–¥–∞—á–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
#     tasks = [worker(semaphore) for i in range(10)]
#     await asyncio.gather(*tasks)  # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏


# asyncio.run(main())


# import asyncio
# import random

# –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä —Å –ª–∏–º–∏—Ç–æ–º –Ω–∞ 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
# semaphore = asyncio.Semaphore(3)


# async def limited_task(task_id):
#     # –ñ–¥—ë–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –æ—Ç —Å–µ–º–∞—Ñ–æ—Ä–∞
#     async with semaphore:
#         print(f"–ù–∞—á–∞–ª–æ –∑–∞–¥–∞—á–∏ {task_id}")
#         # –≠–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—Ä–æ—Å –∫ API)
#         await asyncio.sleep(random.uniform(1, 3))
#         print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ {task_id}")


# async def main():
#     # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º 10 –∑–∞–¥–∞—á
#     tasks = [limited_task(i) for i in range(10)]
#     await asyncio.gather(*tasks)


# # –ó–∞–ø—É—Å–∫–∞–µ–º event loop
# asyncio.run(main())


async def nested():
    return 42


async def main():
    # Schedule nested() to run soon concurrently
    # with "main()".
    task = asyncio.create_task(nested())

    # "task" can now be used to cancel "nested()", or
    # can simply be awaited to wait until it is complete:
    s = await task
    raise TimeoutError


asyncio.run(main())
